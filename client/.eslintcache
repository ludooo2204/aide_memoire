[{"C:\\react\\aide_memoire\\client\\src\\index.js":"1","C:\\react\\aide_memoire\\client\\src\\reportWebVitals.js":"2","C:\\react\\aide_memoire\\client\\src\\App.js":"3","C:\\react\\aide_memoire\\client\\src\\components\\TodoList.js":"4","C:\\react\\aide_memoire\\client\\src\\components\\Card.js":"5","C:\\react\\aide_memoire\\client\\src\\modals\\EditTask.js":"6","C:\\react\\aide_memoire\\client\\src\\components\\LoginForm.js":"7","C:\\react\\aide_memoire\\client\\src\\modals\\CreationMemo.js":"8"},{"size":517,"mtime":1625252608647,"results":"9","hashOfConfig":"10"},{"size":375,"mtime":1625252608649,"results":"11","hashOfConfig":"10"},{"size":317,"mtime":1650577027440,"results":"12","hashOfConfig":"10"},{"size":5222,"mtime":1651002675782,"results":"13","hashOfConfig":"10"},{"size":3148,"mtime":1650574899805,"results":"14","hashOfConfig":"10"},{"size":2475,"mtime":1625257799165,"results":"15","hashOfConfig":"10"},{"size":4652,"mtime":1651000906444,"results":"16","hashOfConfig":"10"},{"size":1820,"mtime":1651002485767,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1c58c7q",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\react\\aide_memoire\\client\\src\\index.js",[],["38","39"],"C:\\react\\aide_memoire\\client\\src\\reportWebVitals.js",[],"C:\\react\\aide_memoire\\client\\src\\App.js",["40"],"import logo from './logo.svg';\r\nimport './App.css';\r\nimport TodoList from './components/TodoList'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'font-awesome/css/font-awesome.min.css'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <TodoList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\react\\aide_memoire\\client\\src\\components\\TodoList.js",["41","42","43"],"C:\\react\\aide_memoire\\client\\src\\components\\Card.js",["44","45"],"import React, { useState, useEffect } from \"react\";\r\nimport EditTask from \"../modals/EditTask\";\r\nimport DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\n\r\nconst Card = ({ taskObj, index, deleteTask, updateListArray, filtreCategorie }) => {\r\n\tconst [modal, setModal] = useState(false);\r\n\r\n\tconst colors = [\r\n\t\t{\r\n\t\t\tprimaryColor: \"#5D93E1\",\r\n\t\t\tsecondaryColor: \"#ECF3FC\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tprimaryColor: \"#F9D288\",\r\n\t\t\tsecondaryColor: \"#FEFAF1\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tprimaryColor: \"#5DC250\",\r\n\t\t\tsecondaryColor: \"#F2FAF1\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tprimaryColor: \"#F48687\",\r\n\t\t\tsecondaryColor: \"#FDF1F1\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tprimaryColor: \"#B964F7\",\r\n\t\t\tsecondaryColor: \"#F3F0FD\",\r\n\t\t},\r\n\t];\r\n\r\n\tconst toggle = () => {\r\n\t\tsetModal(!modal);\r\n\t};\r\n\r\n\tconst updateTask = (objToUpdate) => {\r\n\t\tconsole.log(\"taskObj from update\");\r\n\t\tconsole.log(\"taskObj from update\");\r\n\t\tconsole.log(\"taskObj from update\");\r\n\t\tconsole.log(\"taskObj from update\");\r\n\t\tconsole.log(\"taskObj from update\");\r\n\t\tconsole.log(objToUpdate);\r\n\t\tupdateListArray(objToUpdate, taskObj.id);\r\n\t};\r\n\r\n\tconst handleDelete = () => {\r\n\t\tconsole.log(taskObj);\r\n\t\tconsole.log(\"deletre!!\");\r\n\t\tdeleteTask(taskObj.id);\r\n\t};\r\n\r\n\t// const filtreCategorie = (obj) => {\r\n\t// \tconsole.log( index)\r\n\r\n\t// }\r\n\tconst onscroll = (e) => {\r\n\t\tconsole.log(e);\r\n\t};\r\n\treturn (\r\n\t\t<div className=\"card-wrapper mr-5 floatting\">\r\n\t\t\t<div className=\"card-top\" style={{ backgroundColor: colors[index % 5].primaryColor }}></div>\r\n\t\t\t<div className=\"task-holder\">\r\n\t\t\t\t<div className=\"headerCard\">\r\n\t\t\t\t\t<span className=\"card-header\" style={{ backgroundColor: colors[index % 5].secondaryColor, borderRadius: \"10px\" }}>\r\n\t\t\t\t\t\t{taskObj.nom}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<div className=\"tooltip2\">\r\n\t\t\t\t\t\t<span className=\"tooltiptext2\">Clique pour filtrer par catégorie</span>\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclassName=\"card-header-right \"\r\n\t\t\t\t\t\t\tonClick={() => filtreCategorie(index)}\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tbackgroundColor: colors[index % 5].secondaryColor,\r\n\t\t\t\t\t\t\t\tborderRadius: \"10px\",\r\n\t\t\t\t\t\t\t\tborderColor: colors[index % 5].primaryColor,\r\n\t\t\t\t\t\t\t\tborderWidth: \"3px\",\r\n\t\t\t\t\t\t\t\tborderStyle: \"solid\",\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{taskObj.categorie}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t{/* <p className = \"mt-3 card-description\">{taskObj.description}</p> */}\r\n\t\t\t\t<p className=\"mt-3 card-description\" dangerouslySetInnerHTML={{ __html: taskObj.description }}></p>\r\n\r\n\t\t\t\t<div className=\"icon-delete-modify\">\r\n\t\t\t\t\r\n\r\n\t\t\t\t\t{/* <i\r\n\t\t\t\t\t\tclassName=\"far fa-edit mr-3\"\r\n\t\t\t\t\t\tstyle={{ color: colors[index % 5].primaryColor, cursor: \"pointer\" }}\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tsetModal(true);\r\n\t\t\t\t\t\t\tconsole.log(\"coucou\");\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t></i> */}\r\n\t\t\t\t\t<EditIcon\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tsetModal(true);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<DeleteForeverIcon onClick={handleDelete} />\r\n\t\t\t\t\t{/* <i className=\"fas fa-trash-alt\" style={{ color: colors[index % 5].primaryColor, cursor: \"pointer\" }} onClick={handleDelete}></i>   */}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<EditTask modal={modal} toggle={toggle} updateTask={updateTask} taskObj={taskObj} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","C:\\react\\aide_memoire\\client\\src\\modals\\EditTask.js",["46"],"import React, { useState , useEffect} from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nconst EditTaskPopup = ({modal, toggle, updateTask, taskObj}) => {\r\n    const [taskName, setTaskName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\tconst [categorie, setCategorie] = useState(\"\");\r\n\r\n\r\n    // console.log(\"taskObj\") \r\n    // console.log(taskObj) \r\n    const handleChange = (e) => {\r\n        \r\n        const { name, value } = e.target;\r\n        console.log( name, value)\r\n\r\n\r\n        if (name === \"taskName\") {\r\n\t\t\tsetTaskName(value);\r\n\t\t} else if (name === \"description\") {\r\n\t\t\tsetDescription(value);\r\n\t\t} else if (name === \"categorie\") {\r\n\t\t\tsetCategorie(value);\r\n\t\t}\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTaskName(taskObj.nom)\r\n        setDescription(taskObj.description)\r\n        setCategorie(taskObj.categorie)\r\n    },[])\r\n\r\n    const handleUpdate = (e) => {\r\n        e.preventDefault();\r\n        let taskObj = {};\r\n\t\ttaskObj[\"nom\"] = taskName;\r\n\t\ttaskObj[\"description\"] = description;\r\n\t\ttaskObj[\"categorie\"] = categorie;\r\n        updateTask(taskObj)\r\n    }\r\n\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>Update Task</ModalHeader>\r\n            <ModalBody>\r\n            \r\n                    <div className = \"form-group\">\r\n                        <label>Titre du Mémo</label>\r\n                        <input type=\"text\" className = \"form-control\" value = {taskName} onChange = {handleChange} name = \"taskName\"/>\r\n                    </div>\r\n                    <div className = \"form-group\">\r\n                        <label>Description</label>\r\n                        <textarea rows = \"5\" className = \"form-control\" value = {description} onChange = {handleChange} name = \"description\"></textarea>\r\n                    </div>\r\n                    <div className = \"form-group\">\r\n                        <label>Categorie</label>\r\n                        <textarea rows = \"5\" className = \"form-control\" value = {categorie} onChange = {handleChange} name = \"categorie\"></textarea>\r\n                    </div>\r\n                \r\n            </ModalBody>\r\n            <ModalFooter>\r\n            <Button color=\"primary\" onClick={handleUpdate}>Valider</Button>{' '}\r\n            <Button color=\"secondary\" onClick={toggle}>Annuler</Button>\r\n            </ModalFooter>\r\n      </Modal>\r\n    );\r\n};\r\n\r\nexport default EditTaskPopup;","C:\\react\\aide_memoire\\client\\src\\components\\LoginForm.js",["47","48","49","50"],"C:\\react\\aide_memoire\\client\\src\\modals\\CreationMemo.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":1,"column":8,"nodeType":"57","messageId":"58","endLine":1,"endColumn":12},{"ruleId":"55","severity":1,"message":"59","line":38,"column":9,"nodeType":"57","messageId":"58","endLine":38,"endColumn":17},{"ruleId":"60","severity":1,"message":"61","line":60,"column":69,"nodeType":"62","messageId":"63","endLine":60,"endColumn":71},{"ruleId":"60","severity":1,"message":"61","line":129,"column":51,"nodeType":"62","messageId":"63","endLine":129,"endColumn":53},{"ruleId":"55","severity":1,"message":"64","line":1,"column":27,"nodeType":"57","messageId":"58","endLine":1,"endColumn":36},{"ruleId":"55","severity":1,"message":"65","line":56,"column":8,"nodeType":"57","messageId":"58","endLine":56,"endColumn":16},{"ruleId":"66","severity":1,"message":"67","line":33,"column":7,"nodeType":"68","endLine":33,"endColumn":9,"suggestions":"69"},{"ruleId":"55","severity":1,"message":"70","line":3,"column":8,"nodeType":"57","messageId":"58","endLine":3,"endColumn":31},{"ruleId":"55","severity":1,"message":"71","line":26,"column":8,"nodeType":"57","messageId":"58","endLine":26,"endColumn":19},{"ruleId":"60","severity":1,"message":"61","line":34,"column":25,"nodeType":"62","messageId":"63","endLine":34,"endColumn":27},{"ruleId":"60","severity":1,"message":"61","line":48,"column":24,"nodeType":"62","messageId":"63","endLine":48,"endColumn":26},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'userData' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'onscroll' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'taskObj.categorie', 'taskObj.description', and 'taskObj.nom'. Either include them or remove the dependency array. If 'setTaskName' needs the current value of 'taskObj.nom', you can also switch to useReducer instead of useState and read 'taskObj.nom' in the reducer.","ArrayExpression",["74"],"'HelpOutlineOutlinedIcon' is defined but never used.","'validerForm' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},"Update the dependencies array to be: [taskObj.categorie, taskObj.description, taskObj.nom]",{"range":"77","text":"78"},[912,914],"[taskObj.categorie, taskObj.description, taskObj.nom]"]